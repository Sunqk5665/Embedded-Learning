【0】复习
   了解历史：
      早前阿帕网特点：没有纠错功能、不能互联不同主机和不同操作系统
	  TCP/IP ：TCP   IP
	  
	广域网：链接外网
	局域网：内网通信 
	
	ip：标识主机
	   ip=网络号+主机号
	   A: 0   1byte网络  3byte主机
	   B：10  2byte网络  2byte主机
	   C：110 3byte网络  1byte主机
	   
	port端口：标识进程
	 
	1-1023
	1024-49151
	
	OSI    TCP/IP	

	socket：
	
	套接字：
	   流式-TCP、数据报-UDP、原始
	
    大小端：
     pc-小端
     网络字节序：大端	 
	
	TCP通信流程：
	   服务器：
	      1.创建套接字 socket
			int sockfd=socket(通信方式,套接字类型,0-自动匹配底层);
		  2.绑定  bind
		  ipv4-struct sockaddr_in saddr;
		     saddr.sin_family=AF_INET;
			 saddr.sin_port=htons(端口);
			 saddr.sin_addr.s_addr=inet_addr("ip");
		  bind(sockfd,(struct sockaddr *)&saddr,sizeof(saddr));
		  3.监听  listen
		  listen(sockfd,5);
		  4.阻塞等待客户端链接  accept
		  int acceptfd=accept(sockfd,NULL,NULL);
		  5.接受消息   recv/send
		   recv(acceptfd,buf,sizeof(buf),0-阻塞);  
		  6.关闭套接字  close
	  客户端：
	     1.创建套接字
		   填充服务的结构体
		 2.请求链接服务器 connect
		 connect(sockfd,(struct sockaddr *)&saddr,sizeof(saddr));
		 3.发送接收消息  send
		  send(sockfd,buf,sizeof(buf),0-阻塞);  
		 4.关闭套接字
		 
ftp项目：		 
	list - 查看服务器端目录有什么文件。
     服务：
        1.打开目录   opendir
		2.循环读目录-文件   readdir
		3.判断是否是普通文件    stat
        4.是发送		send
		
		5.发送结束标志。
		
	客户端：发送list请求
            循环接收服务器发送文件名，接收到结束标志循环退出
		 
		 
	put ：客户端将普通文件上传(名字+内容)
     服务器：接收指令请求   
       1.打开新建上传文件
       2.循环接收文件内容写到新建文件中	   
		 
	客户端：发送put请求	+文件名
	   1.打开上传文件
       2.循环读文件内容发送给服务器。
	   3.发送结束标志。
		 
	get：put反过来
    quit：	
		 
	
总结：
    TCP - 循环服务器：循环响应一个客户端的请求
    UDP - 直接实现并发服务器：
           一个服务器响应多个客户端请求。

    学习-TCP		   
		实现并发服务器。
     IO多路复用（select poll epoll）、多进程、多线程。 
	 
	 引入linuxIO模型学习：
	   1.阻塞IO：最常用、效率低、只能处理一路IO、不耗费cpu资源
	   2.非阻塞IO：不常用、能处理多路IO、耗费ＣＰＵ资源。
	   3.信号驱动IO：异步IO，需要底层驱动支持。
	   ４.IO多路复用：实现多路IO*****
	
	总结：select 实现IO多路复用的特点
	   1.文件描述符有限制，一般情况下，只能检测1024个，千级别。
	   2.需要轮询检测，比较耗费cpu资源
	   3.每次都会清空，需要将表从用户空间拷贝到内核空间，
	     比较耗费资源，效率低。
	
	poll实现IO多路复用：
	　1.文件描述符没有限制，大小和定义的表大小有关，万级别。
	  2.需要轮询检测，比较耗费cpu资源。
	  3.不会清空表，只需要将表从用户空间拷贝到内核空间一次，
	     效率高。
		 
	epoll：
	　1.文件描述符没有限制，百万级别(1GB-10万个左右)。
	  2.异步IO，不需要轮询检测，节省cpu资源。
	  3.不会清空表，只需要将表从用户空间拷贝到内核空间一次，
	     效率高。
	
    多进程、多线程也可以实现并发服务器：
	  思想：
	    服务器-每有一个客户端连接成功，创建一个进程或线程
		   和这个客户端进行通信，父进程或主线程继续等待下
		   个客户端连接。
 

并发服务器：0 sockfd  acceptfd 
select :
   sockfd=socket();
   bind();
   listen();
   1.创建表
   fd_set readfds,tempfds;
   FD_ZERO(&readfds);//清空表
   2.将关心文件描述符添加到表中
   FD_SET(0,&readfds);
   FD_SET(sockfd,&readfds);
   int maxfd=sockfd;
   3.调用函数select
   while(1){
       tempfds=readfds;
      int ret=select(maxfd+1,&tempfds,NULL,NULL,NULL);
   4.函数返回
   5.判断
     if(FD_ISSET(0,&tempfds))
	 {fgets();
	   for(int i=4;i<=maxfd;i++)
	   {
	      if(FD_ISSET(i,&readfds))
		    send(i,……);
	   }
	 }
	 if(FD_ISSET(sockfd,&tempfds))
	 {int acceptfd=accept();
	    FD_SET(acceptfd,&readfds);
		if(maxfd < acceptfd)
		  maxfd=acceptfd;
	 }
	 for(int i=4;i<=maxfd;i++)
	 {
	    recvbyte=recv(i,);
		if(recvbyte == 0)
		{
		   close(i);
		   FD_CLR(i,&readfds);
		}
	 }
   6.处理
   }
   close(sockfd);
  

     select(maxfd+1,&读表、&写表、&异常表、&超时);
	 提供宏函数：FD_ZERO(&表) 清空表
	              FD_SET(fd,&表)  添加fd到表中
				 FD_ISSET(fd,&表) 判断fd是否在表中
				 FD_CLR(fd,&表)  将fd从表中清除

poll:
   sockfd=socket();
   bind();
   listen();
   1.创建表
   struct pollfd fds[100]={};
   int last=-1;
   2.将关心文件描述符添加到表中
   fds[++last].fd=0;
   fds[last].events=POLLIN;
   
   fds[++last].fd=sockfd;
   fds[last].events=POLLIN;
   3.调用函数poll
   while(1)
   {
      int ret=poll(fds,last+1,-1);
   4.函数返回
      for(int i=0;i<=last;i++)
	  {
	     if(fds[i].revents==POLLIN)
		 {
		     if(fds[i].fd==0)
			  fgets();
			  
			 else if(fds[i].fd==sockfd)
			 {
			    int acceptfd=accept();
				fds[++last].fd=acceptfd;
				fds[last].events=POLLIN;
			 }else
			 {
			    recvbyte=recv(fds[i].fd,……);
				if(recvbyte ==0)
				{
				   close(fds[i].fd);
				   fds[i--]=fds[last--];
				}
			 }
		 }
   5.判断
   6.处理
      }
   }
     close(sockfd);
  
  poll(表-结构体数组,数组中有效元素个数,-1-阻塞)
   struct pollfd
   {
      fd
	  events 事件：POLLIN　POLLOUT　　POLLERR
	  revents ：调用poll函数返回值，将events赋值给revents
   }
  
 epoll:
  sockfd=socket();
   bind();
   listen();
    1.创建树
	int epfd=epoll_create(1)
    2.将关心文件描述符挂载到树上
	struct epoll_event event;
	struct epoll_event revents[10];
	event.data.fd=0;
	event.events=EPOLLIN|EPOLLET;
	epoll_ctl(epfd,EPOLL_CTL_ADD,0,&event);
	
	event.data.fd=sockfd;
	event.events=EPOLLIN|EPOLLET;
	epoll_ctl(epfd,EPOLL_CTL_ADD,sockfd,&event);
    3.等待链表中有通知的事件，获取
	while(1){
	  int n=epoll_wait(epfd,revents,10,-1);
	4.判断是谁
	   for(int i=0;i<n;i++)
	   {
	       if(revents[i].data.fd==0)
		   {fgets();
		   }else if(revents[i].data.fd==sockfd)
		   {
		      int acceptfd=accept();
			  event.data.fd=acceptfd;
	         event.events=EPOLLIN|EPOLLET;
	         epoll_ctl(epfd,EPOLL_CTL_ADD,acceptfd,&event);
		   }else
		   {
		      int recvbyte=recv(revents[i].data.fd,……);
			  if(recvbyte==0)
			  {
			  close(revents[i].data.fd);
			  epoll_ctl(epfd,EPOLL_CTL_DEL,revents[i].data.fd,NULL);
			  }
		   }
	   }
	5.处理
	}
	close(sockfd);
	
  int epfd=epoll_create(1);  创建树得到句柄
  epoll_ctl(epfd,功能选择op,fd,&event)
    op:EPOLL_CTL_ADD:添加关心文件描述符
	   EPOLL_CTL_MOD:需改已经添加的文件描述符
	   EPOLL_CTL_DEL:删除已经添加的文件描述符
	   
	event：
	  struct epoll_event
	  {
	      data.fd;
		  events - EPOLLIN|EPOLLET   EPOLLOUT|EPOLLET
	  }
	int n(实际拿到的个数)=epoll_wait(epfd,revents数组,获取的个数,-1);
	
  
  多进程：
   sockfd=socket();
   bind();
   listen();
   
   signal(SIGCHLD,handler);
   
   while(1)
   {
      int acceptfd=accept();
	  
	  //创建一个子进程
	  pid=fork();
	  if(pid == 0)
	  {
	    while(1)
		{
		   recv();
		   //退出break
		}
		close(acceptfd);
		close(sockfd);
		exit(-1);
	  }
	  close(acceptfd);
   }
  
    void handler(int sig)
	{
	   waitpid(-1,NULL,WNOHANG);
	}
	
	多线程： 
	    sockfd=socket();
        bind();
        listen();
		while(1)
		{
		    int acceptfd=accept();
			
			//创建一个线程通信
		pthread_create(线程id,NULL,线程函数,给线程函数传参&acceptfd);
		pthread_detach();//将线程设置为游离态，线程退出，系统自动
		//回收线程资源。
		}
		close(acceptfd);	 
	 线程函数：
	   void *pthread(void *arg)
	   {
	       int acceptfd=*((int *)arg)
	       char buf[128];
		   while(1)
		   {
		       recv(acceptfd)
			   printf("%d:%s\n",acceptfd,buf);
			   //退出 close(acceptfd);
		   }
		   pthread_exit(NULL);
	   }
	   
	   超时检测：
	      1.函数自带设置函数参数
		  2.设置套接字属性(setsockopt)
		  3.通过定时器设置超时
		    alarm(2)-SIGALRM
			sigaction()//三步走
	   
	广播流程：
      	
	   发送者：
	      1.创建数据报套接字
		  2.设置允许发送广播属性
		  3.填充广播地址
		  4.指定接收端端口
		  5.发送消息
	   
	   接收者：
	      1.创建数据报套接字
		  2.绑定本地地址(广播地址)和端口
		  3.接收消息
	   
	组播流程：
      	
	   发送者：
	      1.创建数据报套接字
		  2.填充组播地址
		  3.指定接收端端口
		  4.发送消息
	   
	   接收者：
	      1.创建数据报套接字
		  2.将主机ip加入多播组
		  3.绑定本地地址(组播地址)和端口
		  4.接收消息   
	   
	   
	   广播组播特点：*
	    都能实现一个发送多个接收。
      	广播：无论对方是否想接收，该网段内所有主机都会收到。
			  大量的广播会占用大量的网络带宽，造成广播风暴。
		广播地址：该网段内主机号全为1的是广播地址，
		    除此之外还有全网广播地址，255.255.255.255
		组播：广播的折中方式，只有加入到多播组的主机才可以收到消息。
	  
   








	  
	   
	   
	   
	   
	   
	   