【版本控制工具】
业界常用的有两种：
1. SVN
	传统的版本控制工具，特点为集中式分布。
使用一台专用的服务器存储所有资料。
	缺点是所有的动作都必须依赖于中央服务器，如果服务器挂掉，
或者网络不好，会影响整个版本控制功能。

2. Git
	相对较新的版本控制工具，特点为分布式。
每一台客户端都具有完整的版本备份，所有的版本提交都不需要依赖中心服务器。
只有在多人协同时，服务器会处理并发情况。
	缺点是使用相当于SVN较为复杂。

Git环境安装：
1. 先安装Git-2.6.0-32-bit.exe，一直Next即可。
	这个安装包安装的是Git本体。
2. 再安装TortoiseGit-2.4.0.2-64bit.msi，一直Next即可，最后出现语言选择窗口，关闭。
	Git本体是没有界面的，只能考输入命令使用。
为了提升使用效率，此安装包可以给Git提供一个良好的界面。
3. 最后安装中文包TortoiseGit-LanguagePack-2.4.0.0-64bit-zh_CN.msi，一直Next即可。

上面的软件在安装的过程中有可能会弹出一个输入用户名和邮件的窗口。
请输入自定义的用户名和正常使用的邮箱，建议用户名使用纯英文，邮箱使用qq邮箱。

	安装完成后，在桌面上右键会出现几个英文选项。这几个选项就是Git与乌龟的功能入口。
因为安装了中文包，因此需要给乌龟更改为中文显示。
	鼠标右键，点击TortoiseGit，点击Settings。
	在弹出的窗户口中，设置Language为中文后，点击确定。
	
Git分为三个部分：
1. 开发库（工作区）
	相当于写代码的文件夹。
2. 受控库（版本库）
	Git内部备份的位置
3. 产品库（远程仓）
	远程的服务器

Git使用教程：
1. 首先要新建一个文件夹，设置为Git的初始化仓库，后续的版本控制就基于这个文件夹。
注意：不要直接在桌面上初始化仓库，因为桌面本身也是一个文件夹。
我们可以桌面上新建一个文件夹，例如Demo
2. 进入到新创建的Demo文件夹，鼠标右键，点击“Git在这里创建版本库”，在弹出的窗口连续点击确定即可。
3. 可以看到文件夹没有任何变化，此时可以在Windows中点击查看---显示---隐藏的文件，
	开启后，可以看到Demo文件夹中多了一个.git隐藏文件夹，这就是Git的配置信息。
	这个隐藏文件夹千万不要动，如果动了请删除此文件夹，重新执行第2步。
4. 为了后续方便使用，需要增加文件夹图示功能
https://blog.csdn.net/m0_46611181/article/details/105075249
5. 重启后可以看到桌面的Demo文件夹出现对勾图示。

-------使用小乌龟提交到受控库------------------
6. 在Demo文件夹中新建一个hello.txt的文本文档。
7. 此时hello.txt文件在工作区，需要提交到受控库。在Demo文件夹中鼠标右键，点击“Git提交”。
8. 如果弹出一个设置用户名和电子邮箱的窗口，点击是。
9. 在弹出的“Git采用分层次的配置结构......”窗口中，直接点击确定。
10. 在弹出的窗口中输入用户名和邮箱，建议用户名使用纯英文，邮箱使用qq邮箱，输入完成后确定。
11. 在弹出的提交窗口中，输入日志信息，选择要提交的文件后点击提交按钮。
12. 弹出一个提交的进度条窗口，进度条走完以后，直接点击“关闭”。
13. 可以看到文件上出现绿色对勾。

-------查看版本记录-----------------
14.在Demo文件夹中鼠标右键，点击TortoiseGit，点击显示日志，可以看到之前提交的记录。

-------更新第二版--------
15. 打开hello.txt，随便输入一些内容，保存关闭。
16. hello.txt图示变为红色叹号。
17. 重新执行第7步的操作，更新第二版。
18. 第二版更新后，重新执行14步查看版本日志，可以看到第二版的记录。

------版本回退------------
19. 在版本日志中选中第一个版本，鼠标右键，点击“重置master到这个版本”
20. 在弹出的窗口中，选择重置类型为“Hard”，点击确定。
21. 在进度窗口完成，关闭窗口，可以看到hello.txt回到了第一个版本。

------版本前进--------------
22. 在Demo文件中，鼠标右键，点击TortoiseGit，点击“显示引用记录”
23. 在引用记录中选中第二个版本，鼠标右键，点击“重置master到这个版本”
24. 在弹出的窗口中，选择重置类型为“Hard”，点击确定。
25. 在进度窗口完成，关闭窗口，可以看到hello.txt前进了第二个版本。

上面的操作都是小乌龟形成的可视化操作，实际上Git本身主要使用命令操作。
基础操作命令：
cd .. 														返回到上一层文件夹
cd 文件夹名称													进入到某个子文件夹
ls -a														查看当前目录内容
Ctrl + C														停止命令输入或执行
Crtl + L														清屏
git config -l													查看个人信息
git config --global user.name "此处写要更改的名字（英文）"		更改用户名
git config --global user.email "xxx@qq.com"						更改电子邮箱
git config --global credential.helper store						记住登录信息（后期远程仓库使用）
git init														初始化仓库		


-------进入Git命令模式----------
1. 在Demo文件夹中鼠标右键，点击Git Bash Here

-------Git命令提交开发库内容到受控库-------------
2. 进入命令模式，输入下面的命令
git add *				把当前目录下所有的更新文件选中
3. 提交之前查看开发库的状态
git status
返回值结果中有两种情况
	（1）显示一些文件名称，前面有modified（修改）或new（新内容）这样的字眼。
		这种情况下表示后续可提交到受控库。
		“脏”
	（2）不显示文件名称，显示的内容是：nothing to commit
		这种情况表示开发库没有更新，不可提交到受控库。
		“干净”
4. 提交到受控库，使用下面命令
git commit -m "日志信息"

------查看日志-----------
5. 输入下面的命令可以查看版本日志。
git log

------版本回退------------
6. 查看引用记录 
git reflog
7. 在引用记录中可以看到每个版本开始对应黄色版本ID号
8. 使用下面的命令进行版本回退
git reset --hard 版本ID号

----版本前进--------------
9. 同样使用版本回退的方法，执行6-8步

------回到上个版本---------
10. 有时候在开发库修改了文件，但是没有执行add命令，此时图标显示为叹号。
11. 此时可以使用下面命令回到上一个绿色对勾的版本
git checkout *
12. 可以看到红色叹号消失

【远程仓库】
1. Github
https://github.com/
全球最大的代码托管平台，几乎全球所有知名的开源项目都在此网站上。
缺点是国内访问间接性抽风。

2. GitLab
https://about.gitlab.com/
Gitlab支持公有和免费的私有仓库，体验与Github相似，常用于企业内网搭建，
同样速度比较慢。

3. Gitee（码云）
https://gitee.com/
国内代码托管的老大，山寨版Github，一个账号最多免费支持1000个项目。
不区分公有还是私有，国内访问速度快，但是单文件大小不能超过100M，
也会同步一些国外知名的开源项目，这种项目的更新速度比Github慢。

gitee使用教程：
--------------新建远程仓库-----------------
1. 注册登录并访问个人主页。
2. 点击“仓库”，如果是第一次使用，仓库为空。
3. 点击右上角的加号，点击“新建仓库”
4. 在弹出的新页面中，输入纯英文的仓库名称（HelloWorld），点击创建按钮。
5. 在弹出的新页面中，点击HTTPS，复制链接。
https://gitee.com/whwhtc/hello-world.git
------------------克隆到本地-----------------------------
6. 使用小乌龟或者Git命令克隆项目。
	（1）小乌龟
	新建一个HelloWorld的文件夹，进入文件夹后鼠标右键，点击Git克隆。
	在弹出的窗口中，在URL处填写之前复制的HTTPS地址，随后点击缺点，可以看到进度条弹窗正在克隆。
	在克隆的过程中，会弹窗分别提示输入用户名和密码，这里的用户名和密码就是Gitee的用户名和密码。
	（2）Git命令
	新建一个HelloWorld2的文件夹，进入文件夹后鼠标右键，点击Git Bash Here，启动命令行。
	输入下面的命令执行克隆操作：
	git clone HTTPS远程仓库地址
	在克隆的过程中，会弹窗分别提示输入用户名和密码，这里的用户名和密码就是Gitee的用户名和密码。

-----------------推送项目：从本地到远程--------------------
7. 在hello-world文件夹中，新建一个hello.txt的文件，内部随便输入一点东西并保存。
8. 使用之前的提交方式把开发库中的内容提交到受控库。
9. 推送操作
	（1）小乌龟
	在文件夹中鼠标右键，点击Git同步，在弹出的窗口中点击推送。
	在弹出的窗口是依次输入Gitee的用户名和密码。
	成功后可以在窗口看到成功的提示，此时进入Gitee的个人主页或远程仓库的网页，可以看到推送记录。
	（2）Git命令
	使用Git Bash Here弹出命令行，输入下面的远程推送命令。
	git push origin master
	在弹出的窗口是依次输入Gitee的用户名和密码。
	成功后可以在窗口看到成功的提示，此时进入Gitee的个人主页或远程仓库的网页，可以看到推送记录。

-----------------拉取项目：从远程到本地----------------------
（1）小乌龟：
	在文件夹中鼠标右键，点击Git同步，在弹出的窗口中点击拉取。
	在弹出的窗口是依次输入Gitee的用户名和密码。
	成功后可以在本地看到从远程拉取的内容。
（2）Git命令
	使用Git Bash Here弹出命令行，输入下面的拉取命令。
	git pull
	在弹出的窗口是依次输入Gitee的用户名和密码。
	成功后可以在本地看到从远程拉取的内容。

------------------删除远程仓库------------------------
进入Gitee的仓库页面，点击右上方的管理。
在新页面中，点击左侧的删除仓库后，再点击红色的删除按钮。
删除之前还需要输入各种确认信息，防止误删。
删除后不可再次使用这个项目！！！





	





































